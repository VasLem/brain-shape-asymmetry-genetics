classdef borderObj < patchObj
    properties
        % Area properties
        VerticesIndex = [];
        Vertices = [];% depents on the parent mesh
        Faces = []; % Is dependent on the Vertices
        RBF = [];
        NrPoints = [];
        ViewMode = 'Points'; 
    end
    properties (Dependent = true)% interfacing with older used struc version of meshes
        Location; % Is now replaced by Vertices        
        Distances;
        EdgeDistances;
    end     
    methods %Constructor
        function obj = borderObj(varargin)
          obj = obj@patchObj(varargin{:});   % call patchObj constructor  
          if nargin > 0
           Input = find(strcmp(varargin, 'VerticesIndex'));if~isempty(Input), obj.VerticesIndex = varargin{Input+1}; end
           Input = find(strcmp(varargin, 'RBF'));if~isempty(Input), obj.RBF = varargin{Input+1}; end
           Input = find(strcmp(varargin, 'Location'));if~isempty(Input), obj.Vertices = varargin{Input+1}; end
           Input = find(strcmp(varargin, 'Vertices'));if~isempty(Input), obj.Vertices = varargin{Input+1}; end
           Input = find(strcmp(varargin, 'Distances'));if~isempty(Input), obj.Distances = varargin{Input+1}; end
          end
          obj.MarkerSize = 5;
          obj.SingleColor = [0.5 0.5 0.5];
          if validParent(obj) && strcmp(class(obj.Parent),'meshObj'), obj.Axes = obj.Parent.Axes; end            
          if nargin>0
              Input = find(strcmp(varargin, 'CreatePatch'));if ~isempty(Input), createPatch(obj); end
          end
          if obj.Visible
              
        end % LMObj Constructor
    end  
    methods % Special Setting and Getting
        function obj = set.Location(obj,loc)
            obj.Vertices = loc;
        end
        function Location = get.Location(obj)
            Location = obj.Vertices;
        end
        function faces = get.Faces(obj)
            if isempty(obj.Vertices), faces = []; return; end
            faces = [(1:1:size(obj.Vertices,2));nan*ones(1,size(obj.Vertices,2))];
        end
        function obj = set.Faces(obj,faces)
            % do nothing
        end
        function vertices = get.Vertices(obj)
            if ~validParent(obj), vertices = []; return; end
            vertices = obj.Parent.Vertices(:,obj.VerticesIndex);
        end
        function obj = set.Vertices(obj,Loc)
            if ~(size(Loc,1)==3), Loc = Loc'; end
            if isempty(Loc), return; end% can't be done
            obj.Parent.Vertices(:,obj.VerticesIndex) = Loc;
            checkVerticesColorUpdate(obj,'update vertices');
        end
        function obj = set.VerticesIndex(obj,index)
                 if isempty(index) % special care
                    deletePatch(obj); 
                    obj.VerticesIndex = [];
                    obj.TextureColor = [];
                    obj.IndexedColor = [];
                    return;
                 end
                 obj.RBF = [];% if index changes, then the current rbf is not valid anymore
                 obj.VerticesIndex = index;
                 checkVerticesColorUpdate(obj,'update vertices');
                 if ~validParent(obj), return; end
                 if ~isempty(obj.Parent.TextureColor),obj.TextureColor = obj.Parent.TextureColor(:,index);end
                 if ~isempty(obj.Parent.IndexedColor),obj.IndexedColor = obj.Parent.IndexedColor(:,index);end               
        end      
        function obj = set.ViewMode(obj,mode)
                warning('Cannot change ViewMode for LM objects');
        end
        function ViewMode = get.ViewMode(obj)
            ViewMode = obj.ViewMode;
        end
        function distances = get.Distances(obj)
            distances = [];
            if isempty(obj.VerticesIndex)||~validParent(obj), return; end
            distances = meshIntraDistances(obj.Parent,obj.VerticesIndex,'DistanceType','triangle');
        end
        function obj = set.Distances(obj,dist)
            % do nothing
        end
        function distances = get.EdgeDistances(obj)
            distances = [];
            if isempty(obj.VerticesIndex)||~validParent(obj), return; end
            distances = meshIntraDistances(obj.Parent,obj.VerticesIndex,'DistanceType','edge');
        end
        function obj = set.EdgeDistances(obj,dist)
            % do nothing
        end
        function rbf = get.RBF(obj)
%             rbf = [];
%             if isempty(obj.VerticesIndex)||~validParent(obj), return; end
%             if ~isempty(obj.RBF), rbf = obj.RBF; return; end
%             borderRBF(obj);
              rbf = obj.RBF;
        end
        
        
    end
    methods % Custom methods
        function status = borderStatus(obj)
            status{1} = obj.Selected;
            status{2} = obj.Visible;
            if ~isempty(obj.Parent)
                status{3} = obj.Parent.Tag;
            else
                status{3} = '';
            end
            status{4} = obj.Tag;
        end
    end
    methods % Pre and Post functions
        function postAxesChange(obj)
        end      
    end

    methods % Delete
        function delete(obj)          
           deletePatch(obj);
        end
    end
end % classdef

