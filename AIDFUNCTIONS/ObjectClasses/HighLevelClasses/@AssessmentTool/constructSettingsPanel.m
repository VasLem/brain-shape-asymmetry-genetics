function constructSettingsPanel(obj)
% Panel
 obj.Handles.SettingsPanel = uipanel(...
 'Parent',obj.Handles.Panel,...
 'FontSize',10,...
 'FontWeight','bold',...
 'ForegroundColor',[0 0 0.502],...
 'Title','Settings',...
 'TitlePosition','centertop',...
 'Tag','Settings',...
 'UserData',[],...
 'Clipping','on',...
 'Position',[0.0127591706539075 0.623987034035656 0.30622009569378 0.374392220421394],...
 'CreateFcn', {} );
 setappdata(obj.Handles.SettingsPanel,'Application',obj);
% Superimposition Panel
obj.Handles.SuperimpositionPanel = uipanel(...
'Parent',obj.Handles.SettingsPanel,...
'Title','Superimposition',...
'Tag','uipanel6',...
'Clipping','on',...
'Position',[0.031858407079646 0.683760683760684 0.94 0.311229000884173],...
'CreateFcn', {} );   
obj.Handles.CompensateScaleBox = uicontrol(...
'Parent',obj.Handles.SuperimpositionPanel,...
'Units','normalized',...
'Callback',@CompensateScaleBoxCallback,...
'Position',[0.0234146341463415 0.465144230769231 0.913170731707317 0.480769230769231],...
'String','Compensate Scale',...
'Style','checkbox',...
'Tag','CompensateScaleBox',...
'CreateFcn', {} );         
 setappdata(obj.Handles.CompensateScaleBox,'Application',obj);
 obj.Handles.RobustnessLevelBox = uicontrol(...
'Parent',obj.Handles.SuperimpositionPanel,...
'Units','normalized',...
'Callback',@RobustnessLevelBoxCallback,...
'Position',[0.0234146341463415 0.10 0.75 0.35],...
'String','Robustness Level',...
'Style','checkbox',...
'Tag','RobustnessLevelBox',...
'Value',0,...
'CreateFcn', {} );         
 setappdata(obj.Handles.RobustnessLevelBox,'Application',obj);
 obj.Handles.RobustnessLevelEdit = uicontrol(...
'Parent',obj.Handles.SuperimpositionPanel,...
'Units','normalized',...
'BackgroundColor',[1 1 1],...
'Callback',@RobustnessLevelEditCallback,...
'Position',[0.70 0.147451923076923 0.20 0.30],...
'String','nan',...
'Style','edit',...
'CreateFcn',{},...
'Enable','off',...
'Tag','RobustnessLevelEdit');
setappdata(obj.Handles.RobustnessLevelEdit,'Application',obj);
% Outlier Analysis
obj.Handles.OutlierAnalysisPanel = uipanel(...
'Parent',obj.Handles.SettingsPanel,...
'Title','Outlier Analysis',...
'Tag','uipanel6',...
'Clipping','on',...
'Position',[0.031858407079646 0.36 0.94 0.311229000884173],...
'CreateFcn', {} );   
obj.Handles.OutliersOnlyBox = uicontrol(...
'Parent',obj.Handles.OutlierAnalysisPanel,...
'Units','normalized',...
'Callback',@OutliersOnlyBoxCallback,...
'Position',[0.0234146341463415 0.465144230769231 0.913170731707317 0.480769230769231],...
'String','Outliers Only',...
'Style','checkbox',...
'Tag','OutliersOnlyBox',...
'CreateFcn', {} );         
 setappdata(obj.Handles.OutliersOnlyBox,'Application',obj);
 obj.Handles.OutliersBinaryBox = uicontrol(...
'Parent',obj.Handles.OutlierAnalysisPanel,...
'Units','normalized',...
'Callback',@OutliersBinaryBoxCallback,...
'Position',[0.0234146341463415 0.10 0.75 0.35],...
'String','Outliers Binary',...
'Style','checkbox',...
'Tag','OutliersBinaryBox',...
'Value',0,...
'CreateFcn', {} );         
 setappdata(obj.Handles.OutliersBinaryBox,'Application',obj);
 obj.Handles.OutliersBinaryEdit = uicontrol(...
'Parent',obj.Handles.OutlierAnalysisPanel,...
'Units','normalized',...
'BackgroundColor',[1 1 1],...
'Callback',@OutliersBinaryEditCallback,...
'Position',[0.70 0.147451923076923 0.20 0.30],...
'String','nan',...
'Style','edit',...
'CreateFcn',{},...
'Enable','off',...
'Tag','OutliersBinaryEdit');
setappdata(obj.Handles.OutliersBinaryEdit,'Application',obj);
% Threshold analysis
obj.Handles.ThresholdAnalysisPanel = uipanel(...
'Parent',obj.Handles.SettingsPanel,...
'Title','Threshold Analysis',...
'Tag','uipanel6',...
'Clipping','on',...
'Position',[0.031858407079646 0.04 0.94 0.311229000884173],...
'CreateFcn', {} );   
obj.Handles.LocalBox = uicontrol(...
'Parent',obj.Handles.ThresholdAnalysisPanel,...
'Units','normalized',...
'Callback',@LocalBoxCallback,...
'Position',[0.0234146341463415 0.52 0.75 0.35],...
'String','Local',...
'Style','checkbox',...
'Tag','LocalBox',...
'CreateFcn', {} );         
 setappdata(obj.Handles.LocalBox,'Application',obj);
 obj.Handles.LocalEdit = uicontrol(...
'Parent',obj.Handles.ThresholdAnalysisPanel,...
'Units','normalized',...
'Callback',@LocalEditCallback,...
'FontWeight','normal',...
'ForegroundColor',[0 0 0.502],...
'Position',[0.70 0.52 0.20 0.30],...
'String','Load',...
'Tag','LocalEdit',...
'Enable','off',...
'CreateFcn', {} );
setappdata(obj.Handles.LocalEdit,'Application',obj);
setappdata(obj.Handles.LocalEdit,'LocalThresholds',[]);
obj.Handles.GlobalBox = uicontrol(...
'Parent',obj.Handles.ThresholdAnalysisPanel,...
'Units','normalized',...
'Callback',@GlobalBoxCallback,...
'Position',[0.0234146341463415 0.10 0.75 0.35],...
'String','Global',...
'Style','checkbox',...
'Tag','Globalox',...
'Value',1,...
'CreateFcn', {} );         
 setappdata(obj.Handles.GlobalBox,'Application',obj);   
 obj.Handles.GlobalEdit = uicontrol(...
'Parent',obj.Handles.ThresholdAnalysisPanel,...
'Units','normalized',...
'BackgroundColor',[1 1 1],...
'Callback',@GlobalEditCallback,...
'Position',[0.70 0.147451923076923 0.20 0.30],...
'String','3',...
'Style','edit',...
'CreateFcn',{},...
'Enable','on',...
'Tag','GlobalEdit');
setappdata(obj.Handles.GlobalEdit,'Application',obj);
end
%% Callbacks
function CompensateScaleBoxCallback(hObject,eventdata)
         obj = getappdata(hObject,'Application');
         if obj.Active == 0; return; end
         obj.AssessmentList{obj.Active}.CompensateScale = get(hObject,'Value');
         updateTable(obj,obj.Active);
end
function RobustnessLevelBoxCallback(hObject,eventdata)
         obj = getappdata(hObject,'Application');
         switch get(hObject,'Value')
             case 1
                 set(obj.Handles.RobustnessLevelEdit,'Enable','on');
                 set(obj.Handles.RobustnessLevelEdit,'String',num2str(2));
                 val = 2;
             case 0
                 set(obj.Handles.RobustnessLevelEdit,'Enable','off');
                 set(obj.Handles.RobustnessLevelEdit,'String','nan');
                 val = nan;
         end
         if obj.Active==0, return; end
         obj.AssessmentList{obj.Active}.Significance = val;
         updateTable(obj,obj.Active);
end
function RobustnessLevelEditCallback(hObject,eventdata)
         obj = getappdata(hObject,'Application');
         if obj.Active == 0, return; end
         obj.AssessmentList{obj.Active}.Significance = str2double(get(hObject,'String'));
         updateTable(obj,obj.Active);
end
function OutliersOnlyBoxCallback(hObject,eventdata)
         obj = getappdata(hObject,'Application');
         if obj.Active == 0; return; end
         obj.AssessmentList{obj.Active}.OutliersOnly = get(hObject,'Value');
         updateTable(obj,obj.Active);
end
function OutliersBinaryBoxCallback(hObject,eventdata)
         obj = getappdata(hObject,'Application');
         switch get(hObject,'Value')
             case 1
                 val = 0.2;
                 set(obj.Handles.OutliersBinaryEdit,'Enable','on');
                 set(obj.Handles.OutliersBinaryEdit,'String',num2str(val));             
             case 0
                 set(obj.Handles.OutliersBinaryEdit,'Enable','off');
                 set(obj.Handles.OutliersBinaryEdit,'String','nan');
                 val = nan;
         end
         if obj.Active == 0; return; end
         obj.AssessmentList{obj.Active}.OutliersBinary = get(hObject,'Value');
         obj.AssessmentList{obj.Active}.OutliersThreshold = val;
         updateTable(obj,obj.Active);
end
function OutliersBinaryEditCallback(hObject,eventdata)
         obj = getappdata(hObject,'Application');
         if obj.Active == 0, return; end
         obj.AssessmentList{obj.Active}.OutliersThreshold = str2double(get(hObject,'String'));
         updateTable(obj,obj.Active);
end
function LocalBoxCallback(hObject,eventdata)
         obj = getappdata(hObject,'Application');
         switch get(hObject,'Value')
             case 1
                 change2Local(obj)
             case 0
                 change2Global(obj);
         end
end
function GlobalBoxCallback(hObject,eventdata)
         obj = getappdata(hObject,'Application');
         switch get(hObject,'Value')
             case 1                 
                 change2Global(obj);
             case 0
                 change2Local(obj);
         end     
end
function change2Local(obj)
         set(obj.Handles.LocalBox,'Value',1);
         set(obj.Handles.LocalEdit,'Enable','on');
         set(obj.Handles.GlobalBox,'Value',0);
         set(obj.Handles.GlobalEdit,'Enable','off');
         if obj.Active == 0, return; end
         LT = getappdata(obj.Handles.LocalEdit,'LocalThresholds');
         if isempty(LT)
             msgbox('There are no Local Thresholds loaded, adviced to do so');
             set(obj.Handles.LocalEdit,'ForegroundColor',[0 0 0.502]);
         end
         obj.AssessmentList{obj.Active}.Threshold = LT;
         updateTable(obj,obj.Active);
end
function change2Global(obj)
         set(obj.Handles.LocalBox,'Value',0);
         set(obj.Handles.LocalEdit,'Enable','off');
         set(obj.Handles.GlobalBox,'Value',1);
         set(obj.Handles.GlobalEdit,'Enable','on');
         if obj.Active == 0, return; end
         obj.AssessmentList{obj.Active}.Threshold = str2double(get(obj.Handles.GlobalEdit,'String'));
         updateTable(obj,obj.Active);
end
function GlobalEditCallback(hObject,eventdata)
         obj = getappdata(hObject,'Application');
         if obj.Active == 0, return; end
         obj.AssessmentList{obj.Active}.Threshold = str2double(get(hObject,'String'));
         updateTable(obj,obj.Active);

end
function LocalEditCallback(hObject,eventdata)
         obj = getappdata(hObject,'Application');
         out = getMatFile('Local Thresholds');
         out = out{1};
         setappdata(hObject,'LocalThresholds',out);
         if ~isempty(out),set(hObject,'ForegroundColor',[0 0.502 0]);end
         if obj.Active == 0, return; end
         obj.AssessmentList{obj.Active}.Threshold = out;
         updateTable(obj,obj.Active);
end
