classdef OP < hgsetget
    % This is the abstract interface class for Transformation models
    properties 
        Type = 'OP';
        Evaluation = [];% Outlier Process negative log evaluations over all floating surface points
        Derivative = [];% Outlier Process gradients in floating surface points
        pdfEvaluation = [];% Outlier Process pdf evaluation of floating surface points
    end
    properties (Abstract = true)
        pdfP;% Outlier Process parameters
    end
    properties (Dependent = true)
        nrpdfP;% number of parameters
    end
    methods %Constructor
        function obj = OP(varargin)
          if nargin > 0
             Input = find(strcmp(varargin, 'pdfP'));if ~isempty(Input), obj.pdfP = varargin{Input+1}; end
             Input = find(strcmp(varargin, 'Evaluation'));if ~isempty(Input), obj.Evaluation = varargin{Input+1}; end
             Input = find(strcmp(varargin, 'Derivative'));if ~isempty(Input), obj.Derivative = varargin{Input+1}; end
             Input = find(strcmp(varargin, 'pdfEvaluation'));if ~isempty(Input), obj.pdfEvaluation = varargin{Input+1}; end
          end
        end
    end  
    methods % Special Setting and Getting
        function nr = get.nrP(obj)
            nr = length(obj.pdfP);
        end
    end       
    methods % InterFace functions 
        function cobj = clone(obj)
                 cobj = eval(class(obj));
                 cobj.pdfP = obj.pdfP;
                 cobj.Evaluation = obj.Evaluation;
                 cobj.Derivative = obj.Derivative;
                 cobj.pdfEvaluation = obj.pdfEvaluation;         
        end
        function delete(obj) 
            % nothing special
        end
        function varargout = clear(obj)
                 if nargout == 1
                    obj = clone(obj);
                    varargout{1} = obj;
                 end
                 obj.Evaluation = [];
                 obj.Derivative = [];
                 obj.pdfEvaluation = [];
        end
        function struc = saveobj(obj)
            struc = obj2struc(obj);
        end
        function struc = obj2struc(obj)
            % converting relevant information
            struc.Type = obj.Type;
            struc.pdfP = obj.pdfP;
            struc.Evaluation = obj.Evaluation;
            struc.Derivative = obj.Derivative;
            struc.pdfEvaluation = obj.pdfEvaluation;
        end
        function obj = struc2obj(obj,struc)
                 obj.Type = struc.Type;
                 obj.pdfP = struc.pdfP;
                 obj.Evaluation = struc.Evaluation;
                 obj.Derivative = struc.Derivative;
                 obj.pdfEvaluation = struc.pdfEvaluation;
        end
    end
    methods (Static = true) % Static interface functions
        function obj = loadobj(struc)
            obj = struc2obj(eval(struc.Type),struc);
        end
    end
    methods (Abstract = true) %Abstract Interfaces Functions
            varargout = eval(obj,fs,varargin);
            varargout = derivate(obj,fs,varargin);
            varargout = update(obj,fs,inlierP);
            varargout = initialize(obj,fs,varargin);
            varargout = pdf(obj,fs,varargin);
    end
end % classdef

