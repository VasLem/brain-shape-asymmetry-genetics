classdef combinedTM < TM
    % a transformation class having multiple transformation models executed
    % sequentaly
    properties (Abstract = true, Dependent = true)
        List;% List of Transformation models with order of execution: Tm{1}oTm{2}...oTM{end}
    end
    properties
        Temp = 0;
    end
    properties (Dependent = true)
        P;% Transformation Model parameters;
        d;% Parameter deviations to compute numerical gradients
        Fields;% The fields of LMobj or meshObj on which the transformation applies, mostly: Vertices
        nrTM;% number of Transformation models
        nrTMP;% array of nr of Parameters per List
        ActiveModel;% Active Mode
    end
    methods %Constructor
        function obj = combinedTM(varargin)
          obj = obj@TM(varargin{:});
          Input = find(strcmp(varargin, 'List'));if ~isempty(Input), obj.List = varargin{Input+1}; end
        end
    end
    methods % Setting and Getting
        function nr = get.nrTM(obj)
                 nr = length(obj.List);
        end
        function P = get.P(obj)
                 P = [];
                 if obj.nrTM==0, return; end
                 for i=1:1:obj.nrTM
                     P = [P; obj.List{i}.P]; %#ok<AGROW>
                 end
        end
        function obj = set.P(obj,par)
                 if isempty(obj.List), return; end
                 index = 1;
                 for i=1:1:obj.nrTM      
                     obj.List{i}.P = par(index:index+obj.List{i}.nrP-1);
                     index = index + obj.List{i}.nrP;
                 end
        end
%         function out = get.List(obj)
%                  out = obj.List;
%                  if isempty(out), return; end
%                  index = (1:length(out));
%                  badindex = [];
%                  for i=1:1:length(out)
%                      if ~mySuperClass.isH(out{i}), badindex = [badindex i]; end %#ok<AGROW>
%                  end
%                  restindex = setdiff(index,badindex);
%                  out = out(restindex);
%         end
%         function obj = set.List(obj,in)
%             if isempty(obj.List), obj.List = in; return; end
%             for i=1:1:max(obj.nrTM,length(in))
%                 obj.List{i} = in{i};
%             end
%         end
        function d = get.d(obj)
                 d = [];
                 if obj.nrTM==0, return; end
                 for i=1:1:obj.nrTM
                     d = [d; obj.List{i}.d]; %#ok<AGROW>
                 end
        end
        function obj = set.d(obj,val)
                 if isempty(obj.List), return; end
                 index = 1;
                 for i=1:1:obj.nrTM      
                     obj.List{i}.d = val(index:index+obj.List{i}.nrP-1);
                     index = index + obj.List{i}.nrP;
                 end
        end
        function nr = get.nrTMP(obj)
                 if obj.nrTM==0, nr = []; return; end
                 nr = zeros(1,obj.nrTM);
                 for i=1:1:obj.nrTM
                     nr(i) = obj.List{i}.nrP;
                 end
        end
        function mindex = get.ActiveModel(obj)
                 if isempty(obj.List), mindex = []; return; end
                 nr = 0;
                 nrP = obj.nrTMP;
                 %success = false;
                 for mindex=1:1:obj.nrTM
                     nr = nr + nrP(mindex);
                     if obj.ActiveP<=nr
                        %success = true;                         
                        break;
                     end
                 end
                 %if ~success, mindex = []; return; end
                 obj.List{mindex}.ActiveP = nrP(mindex)-(nr-obj.ActiveP);
        end
        function fields = get.Fields(obj)
                 if obj.nrTM==0, fields = {}; return; end
                 fields = {};
                 for i=1:1:obj.nrTM
                     fields = union(fields,obj.List{i}.Fields); %#ok<AGROW>
                 end            
        end
        function obj = set.Fields(obj,field) %#ok<INUSD>
                 % dummy
        end
    end
    methods % InterFace functions
        function delete(obj) 
           delete@TM(obj);
           if isempty(obj.List), return; end
           tmp = obj.List;
           for i=1:1:obj.nrTM
               delete(tmp{i});
           end
        end
        function copy(obj,cobj)
                 copy@TM(obj);
                 cobj.List = {};
                 if obj.nrTM==0, return; end
                 for i=1:1:obj.nrTM
                     cobj.List{i} = clone(obj.List{i});
                 end
        end
        function out = clear(obj)
                 if nargout == 1
                    obj = clone(obj);
                    out = obj;
                 end
                 clear@TM(obj);
                 if isemtpy(obj.List), return; end
                 for i=1:1:obj.nrTM
                     clear(obj.List{i});
                 end
        end
        function struc = obj2struc(obj)
            % converting relevant information
            struc = obj2struc@TM(obj);
            if isempty(obj.List), struc.List = {}; return; end
            for s=1:1:obj.nrTM
                struc.List{s} = obj2struc(obj.List{s});
            end
        end
        function obj = struc2obj(obj,struc)
                 obj = struc2obj@TM(obj,struc);
                 if isempty(struc.List),obj.List = {}; return; end
                 for t=1:1:length(struc.List)
                     obj.List{t} = struc2obj(eval(struc.List{t}.Type),struc.List{t});
                 end
        end
        function postActiveField(obj,field) %#ok<INUSD>
                 if isempty(obj.List), return; end
                 for i=1:1:obj.nrTM
                     obj.List{i}.ActiveField = field;
                 end
        end
        
        
    end
end % classdef

