function constructVisualizationPanel(obj)
% Panel
 obj.Handles.VisualizationPanel = uipanel(...
 'Parent',obj.Handles.Panel,...
 'FontSize',10,...
 'FontWeight','bold',...
 'ForegroundColor',[0 0 0.502],...
 'Title','Visualization',...
 'TitlePosition','centertop',...
 'Tag','Visualization',...
 'Clipping','on',...
 'Position',[0.6462765957446809 0.6231884057971014 0.3324468085106383 0.37549407114624506],...
 'CreateFcn', {} );
 setappdata(obj.Handles.VisualizationPanel,'Application',obj);
% Check Boxes
obj.Handles.DysmorphogramBox = uicontrol(...
'Parent',obj.Handles.VisualizationPanel,...
'Units','normalized',...
'Callback', @DysmorphogramBoxCallback,...
'Position',[0.068 0.84 0.7609756097560977 0.11743981209630061],...
'String','Outlier Map',...
'Value', 0,...
'Style','checkbox',...
'Tag','DysmorphogramBox',...
'CreateFcn', {} );
setappdata(obj.Handles.DysmorphogramBox,'Application',obj);
%
obj.Handles.DistanceMapBox = uicontrol(...
'Parent',obj.Handles.VisualizationPanel,...
'Units','normalized',...
'Callback', @DistanceMapBoxCallback,...
'Position',[0.068 0.73 0.76 0.12],...
'String','Distance Map',...
'Value', 0,...
'Style','checkbox',...
'Tag','DistanceMapBox',...
'CreateFcn', {} );
setappdata(obj.Handles.DistanceMapBox,'Application',obj);
%
obj.Handles.VectorFieldBox = uicontrol(...
'Parent',obj.Handles.VisualizationPanel,...
'Units','normalized',...
'Callback', @VectorFieldBoxCallback,...
'Position',[0.068 0.61 0.76 0.12],...
'String','Vector Field',...
'Value', 0,...
'Style','checkbox',...
'Tag','VectorFieldBox',...
'CreateFcn', {} );
setappdata(obj.Handles.VectorFieldBox,'Application',obj);
%
obj.Handles.ThresholdMapBox = uicontrol(...
'Parent',obj.Handles.VisualizationPanel,...
'Units','normalized',...
'Callback', @ThresholdMapBoxCallback,...
'Position',[0.068 0.49 0.76 0.12],...
'String','Threshold Map',...
'Value', 0,...
'Style','checkbox',...
'Tag','ThresholdMapBox',...
'CreateFcn', {} );
setappdata(obj.Handles.ThresholdMapBox,'Application',obj);
%
obj.Handles.ScanBox = uicontrol(...
'Parent',obj.Handles.VisualizationPanel,...
'Units','normalized',...
'Callback', @ScanBoxCallback,...
'Position',[0.068 0.38 0.76 0.12],...
'String','Scan',...
'Value', 0,...
'Style','checkbox',...
'Tag','ScanBox',...
'CreateFcn', {} );
setappdata(obj.Handles.ScanBox,'Application',obj);
%
obj.Handles.NormBox = uicontrol(...
'Parent',obj.Handles.VisualizationPanel,...
'Units','normalized',...
'Callback', @NormBoxCallback,...
'Position',[0.068 0.25 0.76 0.12],...
'String','Norm',...
'Value', 0,...
'Style','checkbox',...
'Tag','NormBox',...
'CreateFcn', {} );
setappdata(obj.Handles.NormBox,'Application',obj);
obj.Handles.ScanCurvatureBox = uicontrol(...
'Parent',obj.Handles.VisualizationPanel,...
'Units','normalized',...
'Callback', @ScanCurvatureBoxCallback,...
'Position',[0.5 0.38 0.49 0.12],...
'String','Scan Curv.',...
'Value', 0,...
'Style','checkbox',...
'Tag','ScanCurvatureBox',...
'CreateFcn', {} );
setappdata(obj.Handles.ScanCurvatureBox,'Application',obj);
%
obj.Handles.NormCurvatureBox = uicontrol(...
'Parent',obj.Handles.VisualizationPanel,...
'Units','normalized',...
'Callback', @NormCurvatureBoxCallback,...
'Position',[0.5 0.25 0.49 0.12],...
'String','Norm Curv.',...
'Value', 0,...
'Style','checkbox',...
'Tag','NormCurvatureBox',...
'CreateFcn', {} );
setappdata(obj.Handles.NormCurvatureBox,'Application',obj);
obj.Handles.CurvatureDiffBox = uicontrol(...
'Parent',obj.Handles.VisualizationPanel,...
'Units','normalized',...
'Callback', @CurvatureDiffBoxCallback,...
'Position',[0.5 0.49 0.49 0.12],...
'String','Curv. Diff.',...
'Value', 0,...
'Style','checkbox',...
'Tag','CurvatureDiffBox',...
'CreateFcn', {} );
setappdata(obj.Handles.CurvatureDiffBox,'Application',obj);
obj.Handles.AreaBox = uicontrol(...
'Parent',obj.Handles.VisualizationPanel,...
'Units','normalized',...
'Callback', @AreaBoxCallback,...
'Position',[0.5 0.61 0.49 0.12],...
'String','Area Ratio',...
'Value', 0,...
'Style','checkbox',...
'Tag','AreaBox',...
'CreateFcn', {} );
setappdata(obj.Handles.AreaBox,'Application',obj);
obj.Handles.NormDisplacementBox = uicontrol(...
'Parent',obj.Handles.VisualizationPanel,...
'Units','normalized',...
'Callback', @NormDisplacementBoxCallback,...
'Position',[0.5 0.73 0.49 0.12],...
'String','Norm Disp.',...
'Value', 0,...
'Style','checkbox',...
'Tag','NormDisplacementBox',...
'CreateFcn', {} );
setappdata(obj.Handles.NormDisplacementBox,'Application',obj);
obj.Handles.SyncButton = uicontrol(...
'Parent',obj.Handles.VisualizationPanel,...
'Units','normalized',...
'Callback',@SyncCallback,...
'FontWeight','bold',...
'ForegroundColor',[0 0 0.502],...
'Position',[0.0494845360824742 0.08 0.896907216494845 0.15],...
'String','Sync Cameras with Scan Viewer',...
'Enable','on',...
'Tag','SyncButton',...
'CreateFcn', {} );
setappdata(obj.Handles.SyncButton,'Application',obj);
end
%% Callbacks
function DysmorphogramBoxCallback(hObject,eventdata)
         obj = getappdata(hObject,'Application');
         switch get(hObject,'Value')
             case 1
                 if isempty(obj.DysmorphViewer),
                     obj.DysmorphViewer = viewer3DObj;
                 end
                 obj.DysmorphViewer.Visible = true;                
             case 0
                 obj.DysmorphViewer.Visible = false;
         end
         updateDysmorhViewer(obj);
         
end
function DistanceMapBoxCallback(hObject,eventdata)
         obj = getappdata(hObject,'Application');
         switch get(hObject,'Value')
             case 1
                 if isempty(obj.DistanceViewer)
                    obj.DistanceViewer = viewer3DObj;
                 end
                 obj.DistanceViewer.Visible = true;
             case 0
                 obj.DistanceViewer.Visible = false;
         end
         updateDistanceViewer(obj);
end
function VectorFieldBoxCallback(hObject,eventdata)
         obj = getappdata(hObject,'Application');
         switch get(hObject,'Value')
             case 1
                 if isempty(obj.VectorViewer)
                     obj.VectorViewer = viewer3DObj;
                 end
                 obj.VectorViewer.Visible = true;
             case 0
                 obj.VectorViewer.Visible = false;
         end
         updateVectorViewer(obj);
end
function ThresholdMapBoxCallback(hObject,eventdata)
         obj = getappdata(hObject,'Application');
         switch get(hObject,'Value')
             case 1
                 if isempty(obj.ThresholdViewer)
                     obj.ThresholdViewer = viewer3DObj;
                 end
                 obj.ThresholdViewer.Visible = true;                 
             case 0
                 obj.ThresholdViewer.Visible = false;                 
         end
         updateThresholdViewer(obj);
end
function ScanBoxCallback(hObject,eventdata)
         obj = getappdata(hObject,'Application');
         switch get(hObject,'Value')
             case 1
                 if isempty(obj.ScanViewer)
                    obj.ScanViewer = viewer3DObj; 
                 end
                 obj.ScanViewer.Visible = true;
             case 0
                 obj.ScanViewer.Visible = false;
         end
         updateScanViewer(obj);
end
function NormBoxCallback(hObject,eventdata)
         obj = getappdata(hObject,'Application');
         switch get(hObject,'Value')
             case 1
                 if isempty(obj.NormViewer)
                     obj.NormViewer = viewer3DObj;
                 end
                 obj.NormViewer.Visible = true;
             case 0
                 obj.NormViewer.Visible = false;
         end
         updateNormViewer(obj);
end
function ScanCurvatureBoxCallback(hObject,eventdata)
         obj = getappdata(hObject,'Application');
         switch get(hObject,'Value')
             case 1
                 if isempty(obj.ScanCurvatureViewer)
                     obj.ScanCurvatureViewer = viewer3DObj;
                 end
                 obj.ScanCurvatureViewer.Visible = true;
             case 0
                 obj.ScanCurvatureViewer.Visible = false;
         end
         updateScanCurvatureViewer(obj);
end
function NormCurvatureBoxCallback(hObject,eventdata)
         obj = getappdata(hObject,'Application');
         switch get(hObject,'Value')
             case 1
                 if isempty(obj.NormCurvatureViewer)
                     obj.NormCurvatureViewer = viewer3DObj;
                 end
                 obj.NormCurvatureViewer.Visible = true;
             case 0
                 obj.NormCurvatureViewer.Visible = false;
         end
         updateNormCurvatureViewer(obj);
end
function CurvatureDiffBoxCallback(hObject,eventdata)
         obj = getappdata(hObject,'Application');
         switch get(hObject,'Value')
             case 1
                 if isempty(obj.CurvatureDiffViewer)
                     obj.CurvatureDiffViewer = viewer3DObj;
                 end
                 obj.CurvatureDiffViewer.Visible = true;
             case 0
                 obj.CurvatureDiffViewer.Visible = false;
         end
         updateCurvatureDiffViewer(obj);
end
function NormDisplacementBoxCallback(hObject,eventdata)
         obj = getappdata(hObject,'Application');
         switch get(hObject,'Value')
             case 1
                 if isempty(obj.NormDisplacementViewer)
                     obj.NormDisplacementViewer = viewer3DObj;
                 end
                 obj.NormDisplacementViewer.Visible = true;
             case 0
                 obj.NormDisplacementViewer.Visible = false;
         end
         updateNormDisplacementViewer(obj);
end
function AreaBoxCallback(hObject,eventdata)
         obj = getappdata(hObject,'Application');
         switch get(hObject,'Value')
             case 1
                 if isempty(obj.AreaViewer)
                     obj.AreaViewer = viewer3DObj;
                 end
                 obj.AreaViewer.Visible = true;
             case 0
                 obj.AreaViewer.Visible = false;
         end
         updateAreaViewer(obj);
end

function SyncCallback(hObject,eventdata)
         obj = getappdata(hObject,'Application');
         if isempty(obj.ScanViewer), return; end
         if ~isempty(obj.NormViewer)
            syncCamera(obj.ScanViewer,obj.NormViewer);
         end
         if ~isempty(obj.DistanceViewer)
            syncCamera(obj.ScanViewer,obj.DistanceViewer);
         end
         if ~isempty(obj.ThresholdViewer)
            syncCamera(obj.ScanViewer,obj.ThresholdViewer);
         end
         if ~isempty(obj.DysmorphViewer)
            syncCamera(obj.ScanViewer,obj.DysmorphViewer);
         end
         if ~isempty(obj.VectorViewer)
            syncCamera(obj.ScanViewer,obj.VectorViewer);
         end
         if ~isempty(obj.NormCurvatureViewer)
            syncCamera(obj.ScanViewer,obj.NormCurvatureViewer);
         end
         if ~isempty(obj.ScanCurvatureViewer)
            syncCamera(obj.ScanViewer,obj.ScanCurvatureViewer);
         end
         if ~isempty(obj.CurvatureDiffViewer)
            syncCamera(obj.ScanViewer,obj.CurvatureDiffViewer);
         end
         if ~isempty(obj.NormDisplacementViewer)
            syncCamera(obj.ScanViewer,obj.NormDisplacementViewer);
         end
         if ~isempty(obj.AreaViewer)
            syncCamera(obj.ScanViewer,obj.AreaViewer);
         end
end