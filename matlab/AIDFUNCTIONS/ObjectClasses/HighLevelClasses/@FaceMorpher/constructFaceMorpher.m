function constructFaceMorpher(obj)
% GENERATING THE MAIN FIGURE PANEL
  obj.Handles.Panel = figure('Tag', 'Panel', ...
                             'Units', 'characters', ...
                             'Position', [130    3  100   13], ...
                             'Name', 'Morph Panel', ...
                             'MenuBar', 'none', ...
                             'NumberTitle', 'off', ...
                             'Color', get(0,'DefaultUicontrolBackgroundColor'), ...
                             'Resize', 'off',...
                             'CloseRequestFcn',@PanelCloseCallback);
   setappdata(obj.Handles.Panel,'Application',obj);                      
% GENERATING THE TAB PANELS                            
 obj.Handles.TabPanels = uitabpanel('Parent',obj.Handles.Panel,...
                                    'TabPosition','lefttop',...
                                    'Units','normalized',...
                                    'Position',[0,0.10,1,0.90],...
                                    'Margins',{[0,-1,1,0],'pixels'},...
                                    'Title',{'Principal Components','Properties','Caricature'},...
                                    'TitleBackgroundColor',get(0,'DefaultUicontrolBackgroundColor'),...
                                    'TitleForegroundColor',[0 0 0.502],...
                                    'PanelBackgroundColor',get(0,'DefaultUicontrolBackgroundColor'),...
                                    'FrameBackgroundColor',get(0,'DefaultUicontrolBackgroundColor'),...
                                    'PanelBorderType','none',...
                                    'ResizeFcn',{});
tmp = getappdata(obj.Handles.TabPanels,'panels');
obj.Handles.PC.Panel = tmp(1);
constructPanelPC(obj)
obj.Handles.PROP.Panel = tmp(2);
constructPanelPROP(obj)
obj.Handles.CAR.Panel = tmp(3);
constructPanelCAR(obj)
% GENERATING THE BUTTONS                                
obj.Handles.ResetButton = uicontrol('Parent', obj.Handles.Panel, ...
                                   'Tag', 'Reset Button', ...
                                   'UserData', [], ...
                                   'Style', 'pushbutton', ...
                                   'Units', 'normalized', ...
                                   'Position', [0.01 0.02 0.15 0.10], ...
                                   'FontWeight', 'bold', ...
                                   'ForegroundColor', [0 0 0.502], ...
                                   'String', 'Reset',...
                                   'Callback', @ResetButtonCallback);
setappdata(obj.Handles.ResetButton,'Application',obj);
obj.Handles.BaseButton = uicontrol('Parent', obj.Handles.Panel, ...
                                    'Tag', 'Export Button', ...
                                	'UserData', [], ...
                                	'Style', 'pushbutton', ...
                                    'Units', 'normalized', ...
                                	'Position', [0.17 0.02 0.15 0.10], ...
                                	'FontWeight', 'bold', ...
                                	'ForegroundColor', [0 0 0.502], ...
                                	'String', 'Set',...
                                    'Callback', @BaseButtonCallback);
setappdata(obj.Handles.BaseButton,'Application',obj);
obj.Handles.AverageButton = uicontrol('Parent', obj.Handles.Panel, ...
                                    'Tag', 'Export Button', ...
                                	'UserData', [], ...
                                	'Style', 'pushbutton', ...
                                    'Units', 'normalized', ...
                                	'Position', [0.33 0.02 0.15 0.10], ...
                                	'FontWeight', 'bold', ...
                                	'ForegroundColor', [0 0 0.502], ...
                                	'String', 'Average',...
                                    'Callback', @AverageButtonCallback);
setappdata(obj.Handles.AverageButton,'Application',obj);
obj.Handles.RandomButton = uicontrol('Parent', obj.Handles.Panel, ...
                                    'Tag', 'Export Button', ...
                                	'UserData', [], ...
                                	'Style', 'pushbutton', ...
                                    'Units', 'normalized', ...
                                	'Position', [0.49 0.02 0.15 0.10], ...
                                	'FontWeight', 'bold', ...
                                	'ForegroundColor', [0 0 0.502], ...
                                	'String', 'Random',...
                                    'Callback', @RandomButtonCallback);
setappdata(obj.Handles.RandomButton,'Application',obj);
obj.Handles.ExportButton = uicontrol('Parent', obj.Handles.Panel, ...
                                    'Tag', 'Export Button', ...
                                	'UserData', [], ...
                                	'Style', 'pushbutton', ...
                                    'Units', 'normalized', ...
                                	'Position', [0.65 0.02 0.15 0.10], ...
                                	'FontWeight', 'bold', ...
                                	'ForegroundColor', [0 0 0.502], ...
                                	'String', 'Export',...
                                    'Callback', @ExportButtonCallback);
setappdata(obj.Handles.ExportButton,'Application',obj);
obj.Handles.ImportButton = uicontrol('Parent', obj.Handles.Panel, ...
                                    'Tag', 'Import Button', ...
                                	'UserData', [], ...
                                	'Style', 'pushbutton', ...
                                    'Units', 'normalized', ...
                                	'Position', [0.65 0.125 0.15 0.10], ...
                                	'FontWeight', 'bold', ...
                                	'ForegroundColor', [0 0 0.502], ...
                                	'String', 'Import',...
                                    'Callback', @ImportButtonCallback);                                
setappdata(obj.Handles.ImportButton,'Application',obj);
obj.Handles.LoadButton = uicontrol('Parent', obj.Handles.Panel, ...
                                    'Tag', 'Export Button', ...
                                	'UserData', [], ...
                                	'Style', 'pushbutton', ...
                                    'Units', 'normalized', ...
                                	'Position', [0.81 0.02 0.15 0.10], ...
                                	'FontWeight', 'bold', ...
                                	'ForegroundColor', [0 0 0.502], ...
                                	'String', 'Load Model',...
                                    'Callback', @LoadButtonCallback);
setappdata(obj.Handles.LoadButton,'Application',obj);
end

%% MAIN PANEL CALLBACKS
function PanelCloseCallback(hObject,eventdata)
         obj = getappdata(hObject,'Application');
         delete(obj);
         close all;
end
function ResetButtonCallback(hObject,eventdata)
         obj = getappdata(hObject,'Application');
         updateCurrentFace(obj,'RESET');
end
function ExportButtonCallback(hObject,eventdata)
         obj = getappdata(hObject,'Application');
         if isempty(obj.CurrentFace), return; end
         export(obj.CurrentFace);                 
end
function RandomButtonCallback(hObject,eventdata)
         obj = getappdata(hObject,'Application');
         if isempty(obj.Model), return; end
         %obj.BaseCoeff = (-2.5 + 5*rand(obj.Model.nrEV,1)).*obj.Model.EigStd;
         obj.BaseCoeff = randn(obj.Model.nrEV,1).*obj.Model.EigStd;
         updateCurrentFace(obj,'RESET');
end
function ImportButtonCallback(hObject,eventdata)
         obj = getappdata(hObject,'Application');
         out = getMatFile('Select ImportCoeff');
         if isempty(out), return; end
         obj.BaseCoeff = out{1};
         updateCurrentFace(obj,'RESET');
end
function AverageButtonCallback(hObject,eventdata)
         obj = getappdata(hObject,'Application');
         if isempty(obj.Model), return; end
         obj.BaseCoeff = zeros(obj.Model.nrEV,1);
         updateCurrentFace(obj,'RESET');
end
function BaseButtonCallback(hObject,eventdata)
         obj = getappdata(hObject,'Application');
         if isempty(obj.Model), return; end
         obj.BaseCoeff = obj.CurrentCoeff;
         updateCurrentFace(obj,'RESET');
end
function LoadButtonCallback(hObject,eventdata)
         obj = getappdata(hObject,'Application');
         out = getMatFile('select model');
         if isempty(out), return; end
         switch out{1}.Type
             case 'propertyPCA'
                 obj.Model = propertyPCA(out{1});
             case 'shapePCA'
                 obj.Model = shapePCA(out{1});
             case 'valuePCA'
                 obj.Model = valuePCA(out{1});
             case 'appearancePCA'
                 obj.Model = appearancePCA(out{1});
             case 'ShapeValuePCA'
                 obj.Model = ShapeValuePCA(out{1});
             case 'texturePCA'
                 obj.Model = texturePCA(out{1});
             case 'textureMapPCA'
                 obj.Model = textureMapPCA(out{1});
             otherwise
                 error('Wrong model input');
         end
         obj.Model.AvgVec;
end
%% PC Panel creation functions
function constructPanelPC(obj)
        obj.Handles.PC.Slider = uicontrol(...
                                'Parent',obj.Handles.PC.Panel,...
                                'Units','normalized',...
                                'BackgroundColor',[0.9 0.9 0.9],...
                                'Callback',@PCSliderCallback,...
                                'Position',[0.0218120805369128 0.178378378378378 0.942953020134228 0.124324324324324],...
                                'String',{  'Slider' },...
                                'Style','slider',...
                                'CreateFcn',{},...
                                'Max',3.5,...
                                'Min',-3.5,...
                                'Tag','PC Slider');
        setappdata(obj.Handles.PC.Slider,'Application',obj);
        obj.Handles.PC.Popupmenu = uicontrol(...
                                'Parent',obj.Handles.PC.Panel,...
                                'Units','normalized',...
                                'BackgroundColor',[1 1 1],...
                                'Callback',@PCMenuCallback,...
                                'Position',[0.0268456375838926 0.654054054054054 0.352348993288591 0.2],...
                                'String',{'No Model'},...
                                'Style','popupmenu',...
                                'TooltipString','Select PC',...
                                'Value',1,...
                                'CreateFcn',{},...
                                'Tag','PC Popupmenu');
        setappdata(obj.Handles.PC.Popupmenu,'Application',obj);
        obj.Handles.PC.Edit = uicontrol(...
                                'Parent',obj.Handles.PC.Panel,...
                                'Units','characters',...
                                'BackgroundColor',[1 1 1],...
                                'Callback',@PCEditCallback,...
                                'Position',[2.83333333333333 4 15 2],...
                                'String',{  '0' },...
                                'Style','edit',...
                                'TooltipString','PC Value',...
                                'CreateFcn',{},...
                                'Tag','PC Edit');
        setappdata(obj.Handles.PC.Edit,'Application',obj);
        obj.Handles.PC.Button = uicontrol('Parent', obj.Handles.PC.Panel, ...
                                    'Tag', 'PC Button', ...
                                	'UserData', [], ...
                                	'Style', 'pushbutton', ...
                                    'Units', 'normalized', ...
                                	'Position', [0.30 0.50 0.20 0.15], ...
                                	'FontWeight', 'bold', ...
                                	'ForegroundColor', [0 0 0.502], ...
                                	'String', 'Show Effect',...
                                    'Callback', @PCButtonCallback);
        setappdata(obj.Handles.PC.Button,'Application',obj);
        obj.Handles.PC.Popupmenu2 = uicontrol(...
                                'Parent',obj.Handles.PC.Panel,...
                                'Units','normalized',...
                                'BackgroundColor',[1 1 1],...
                                'Callback',{},...
                                'Position',[0.30 0.40 0.20 0.10],...
                                'String',{'distance' 'x' 'y' 'z'},...
                                'Style','popupmenu',...
                                'Value',1,...
                                'TooltipString','Select',...
                                'CreateFcn',{},...
                                'Tag','PC Popupmenu');
        setappdata(obj.Handles.PC.Popupmenu2,'Application',obj);
end
%% PC PANEL CALLBACKS
function PCMenuCallback(hObject,eventdata)
         obj = getappdata(hObject,'Application');
         if isempty(obj.Model), return; end
         updatePCPanel(obj);
end
function PCSliderCallback(hObject,eventdata)
         obj = getappdata(hObject,'Application');
         value = get(obj.Handles.PC.Slider,'Value');
         maximum = get(obj.Handles.PC.Slider,'max');
         minimum = get(obj.Handles.PC.Slider,'min');
         if value > maximum
            value = maximum;
            set(obj.Handles.PC.Slider,'Value',value);
         end
         if value < minimum;
            value = minimum;
            set(obj.Handles.PC.Slider,'Value',value);
         end
         set(obj.Handles.PC.Edit,'String',num2str(value));
         updateCurrentFace(obj,'PC');
end
function PCButtonCallback(hObject,eventdata)
         obj = getappdata(hObject,'Application');
         pclist = get(obj.Handles.PC.Popupmenu,'String');
         pc = get(obj.Handles.PC.Popupmenu,'Value');
         strlist = get(obj.Handles.PC.Popupmenu2,'String');
         str = strlist{get(obj.Handles.PC.Popupmenu2,'Value')};
         out = showShapeEffect(obj.Model,pc,str,pclist{pc});
         v = get(out.Axes,'Userdata');
         syncCamera(obj.Viewer,v);
         v.AxesVisible = false;
         v.AxesGrid = false;
         v.AxesBox = false;
end
function PCEditCallback(hObject,eventdata)
         obj = getappdata(hObject,'Application');
         val = str2double(get(obj.Handles.PC.Edit,'String'));
         if isnumeric(val) &&  (val >= get(obj.Handles.PC.Slider,'Min')) && (val <= get(obj.Handles.PC.Slider,'Max'))
            set(obj.Handles.PC.Slider,'Value',val);
            updateCurrentFace(obj,'PC');
         else
            set(obj.Handles.PC.Edit,'String',num2str(get(obj.Handles.PC.Slider,'Value')));
         end
end
%% Property panel construction
function constructPanelPROP(obj)
        obj.Handles.PROP.Slider = uicontrol(...
                                'Parent',obj.Handles.PROP.Panel,...
                                'Units','normalized',...
                                'BackgroundColor',[0.9 0.9 0.9],...
                                'Callback',@PROPSliderCallback,...
                                'Position',[0.0218120805369128 0.178378378378378 0.942953020134228 0.124324324324324],...
                                'String',{  'Slider' },...
                                'Style','slider',...
                                'CreateFcn',{},...
                                'Max',3.5,...
                                'Min',-3.5,...
                                'Tag','PROP Slider');
        setappdata(obj.Handles.PROP.Slider,'Application',obj);
        obj.Handles.PROP.Popupmenu = uicontrol(...
                                'Parent',obj.Handles.PROP.Panel,...
                                'Units','normalized',...
                                'BackgroundColor',[1 1 1],...
                                'Callback',@PROPMenuCallback,...
                                'Position',[0.0268456375838926 0.654054054054054 0.352348993288591 0.2],...
                                'String',{'No Model'},...
                                'Style','popupmenu',...
                                'Value',1,...
                                'TooltipString','Select Property',...
                                'CreateFcn',{},...
                                'Tag','PROP Popupmenu');
        setappdata(obj.Handles.PROP.Popupmenu,'Application',obj);
        obj.Handles.PROP.Edit = uicontrol(...
                                'Parent',obj.Handles.PROP.Panel,...
                                'Units','characters',...
                                'BackgroundColor',[1 1 1],...
                                'Callback',@PROPEditCallback,...
                                'Position',[2.83333333333333 4 15 2],...
                                'String',{  '0' },...
                                'Style','edit',...
                                'CreateFcn',{},...
                                'TooltipString','Property Value',...
                                'Tag','PROP Edit');
        setappdata(obj.Handles.PROP.Edit,'Application',obj);
        obj.Handles.PROP.PopupmenuScale = uicontrol(...
                                'Parent',obj.Handles.PROP.Panel,...
                                'Units','characters',...
                                'BackgroundColor',[1 1 1],...
                                'Callback',@ScaleMenuCallback,...
                                'Position',[19 4 7 2],...
                                'String',{'1' '2' '4' '6' '8' '10' '15' '20'},...
                                'Style','popupmenu',...
                                'Value',2,...
                                'TooltipString','Select Property',...
                                'CreateFcn',{},...
                                'Tag','PROP Popupmenu');
        setappdata(obj.Handles.PROP.PopupmenuScale,'Application',obj);
        obj.Handles.PROP.Button = uicontrol('Parent', obj.Handles.PROP.Panel, ...
                                    'Tag', 'Prop Button', ...
                                	'UserData', [], ...
                                	'Style', 'pushbutton', ...
                                    'Units', 'normalized', ...
                                	'Position', [0.30 0.50 0.20 0.15], ...
                                	'FontWeight', 'bold', ...
                                	'ForegroundColor', [0 0 0.502], ...
                                	'String', 'Show Effect',...
                                    'Callback', @PROPButtonCallback);
        setappdata(obj.Handles.PROP.Button,'Application',obj);
        obj.Handles.PROP.Popupmenu2 = uicontrol(...
                                'Parent',obj.Handles.PROP.Panel,...
                                'Units','normalized',...
                                'BackgroundColor',[1 1 1],...
                                'Callback',{},...
                                'Position',[0.30 0.40 0.20 0.10],...
                                'String',{'distance' 'x' 'y' 'z'},...
                                'Style','popupmenu',...
                                'Value',1,...
                                'TooltipString','Select Property',...
                                'CreateFcn',{},...
                                'Tag','PROP Popupmenu');
        setappdata(obj.Handles.PROP.Popupmenu2,'Application',obj);
        obj.Handles.PROP.Listbox = uicontrol(...
                                'Parent',obj.Handles.PROP.Panel,...
                                'Units','characters',...
                                'BackgroundColor',[1 1 1],...
                                'Callback',@PROPListboxCallback,...
                                'Position',[56.3333333333333 3.875 39.1666666666667 5],...
                                'String',{  ' ' },...
                                'Style','listbox',...
                                'Value',1,...
                                'CreateFcn',{},...
                                'TooltipString','Select independent properties',...
                                'Tag','PROP listbox');
end
%% PROP PANEL CALLBACKS
function PROPMenuCallback(hObject,eventdata)
         obj = getappdata(hObject,'Application');
         if isempty(obj.Model), return; end
         updatePROPPanel(obj);
end
function PROPSliderCallback(hObject,eventdata)
         obj = getappdata(hObject,'Application');
         value = get(obj.Handles.PROP.Slider,'Value');
         maximum = get(obj.Handles.PROP.Slider,'max');
         minimum = get(obj.Handles.PROP.Slider,'min');
         if value > maximum
            value = maximum;
            set(obj.Handles.PROP.Slider,'Value',value);
         end
         if value < minimum;
            value = minimum;
            set(obj.Handles.PROP.Slider,'Value',value);
         end
         set(obj.Handles.PROP.Edit,'String',num2str(value));
         updateCurrentFace(obj,'PROP');
end
function ScaleMenuCallback(hObject,eventdata)
         obj = getappdata(hObject,'Application');
         list = get(obj.Handles.PROP.PopupmenuScale,'String');
         obj.PropScale = str2double(list{get(obj.Handles.PROP.PopupmenuScale,'Value')});
         updatePROPPanel(obj);
end
function PROPButtonCallback(hObject,eventdata)
         obj = getappdata(hObject,'Application');
         proplist = get(obj.Handles.PROP.Popupmenu,'String');
         prop = get(obj.Handles.PROP.Popupmenu,'Value');
         indprop = get(obj.Handles.PROP.Listbox,'Value');
         indprop = setdiff(indprop,prop);
         path = getPropertyPath(obj.Model,prop,indprop);
         strlist = get(obj.Handles.PROP.Popupmenu2,'String');
         str = strlist{get(obj.Handles.PROP.Popupmenu2,'Value')};
         out = showShapeEffect(obj.Model,path,str,proplist{prop});
         v = get(out.Axes,'Userdata');
         syncCamera(obj.Viewer,v);
         v.AxesVisible = false;
         v.AxesGrid = false;
         v.AxesBox = false;
end
function PROPEditCallback(hObject,eventdata)
         obj = getappdata(hObject,'Application');
         val = str2double(get(obj.Handles.PROP.Edit,'String'));
         if isnumeric(val) &&  (val >= get(obj.Handles.PROP.Slider,'Min')) && (val <= get(obj.Handles.PROP.Slider,'Max'))
            set(obj.Handles.PROP.Slider,'Value',val);
            updateCurrentFace(obj,'PROP');
         else
            set(obj.Handles.PROP.Edit,'String',num2str(get(obj.Handles.PROP.Slider,'Value')));
         end
end
function PROPListboxCallback(hObject, eventdata)
         obj = getappdata(hObject,'Application');
end
%% Caricature panel construction
function constructPanelCAR(obj)
        obj.Handles.CAR.Slider = uicontrol(...
                                'Parent',obj.Handles.CAR.Panel,...
                                'Units','normalized',...
                                'BackgroundColor',[0.9 0.9 0.9],...
                                'Callback',@CARSliderCallback,...
                                'Position',[0.0218120805369128 0.178378378378378 0.942953020134228 0.124324324324324],...
                                'String',{  'Slider' },...
                                'Style','slider',...
                                'CreateFcn',{},...
                                'Max',3,...
                                'Min',0,...
                                'Tag','CAR Slider');
        setappdata(obj.Handles.CAR.Slider,'Application',obj);
        obj.Handles.CAR.Popupmenu = uicontrol(...
                                'Parent',obj.Handles.CAR.Panel,...
                                'Units','normalized',...
                                'BackgroundColor',[1 1 1],...
                                'Callback',@CARMenuCallback,...
                                'Position',[0.0268456375838926 0.654054054054054 0.352348993288591 0.2],...
                                'String',{'Caricature' 'Anti-Face'},...
                                'Style','popupmenu',...
                                'Value',1,...
                                'TooltipString','Select Property',...
                                'CreateFcn',{},...
                                'Tag','CAR Popupmenu');
        setappdata(obj.Handles.CAR.Popupmenu,'Application',obj);
        obj.Handles.CAR.Edit = uicontrol(...
                                'Parent',obj.Handles.CAR.Panel,...
                                'Units','characters',...
                                'BackgroundColor',[1 1 1],...
                                'Callback',@CAREditCallback,...
                                'Position',[2.83333333333333 4 15 2],...
                                'String',{  '0' },...
                                'Style','edit',...
                                'CreateFcn',{},...
                                'TooltipString','Property Value',...
                                'Tag','CAR Edit');
        setappdata(obj.Handles.CAR.Edit,'Application',obj);
end
%% Caricature Callbacks
function CARMenuCallback(hObject,eventdata)
         obj = getappdata(hObject,'Application');
         if isempty(obj.Model), return; end
         updateCARPanel(obj);
end
function CARSliderCallback(hObject,eventdata)
         obj = getappdata(hObject,'Application');
         value = get(obj.Handles.CAR.Slider,'Value');
         maximum = get(obj.Handles.CAR.Slider,'max');
         minimum = get(obj.Handles.CAR.Slider,'min');
         if value > maximum
            value = maximum;
            set(obj.Handles.CAR.Slider,'Value',value);
         end
         if value < minimum;
            value = minimum;
            set(obj.Handles.CAR.Slider,'Value',value);
         end
         set(obj.Handles.CAR.Edit,'String',num2str(value));
         updateCurrentFace(obj,'CAR');
end
function CAREditCallback(hObject,eventdata)
         obj = getappdata(hObject,'Application');
         val = str2double(get(obj.Handles.CAR.Edit,'String'));
         if isnumeric(val) &&  (val >= get(obj.Handles.CAR.Slider,'Min')) && (val <= get(obj.Handles.CAR.Slider,'Max'))
            set(obj.Handles.CAR.Slider,'Value',val);
            updateCurrentFace(obj,'CAR');
         else
            set(obj.Handles.CAR.Edit,'String',num2str(get(obj.Handles.CAR.Slider,'Value')));
         end
end
